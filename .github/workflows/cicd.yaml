---
on:
  workflow_call:
    inputs:
      language:
        required: false
        default: "all"
        type: string
      ComposerVersion:
        required: false
        default: "latest"
        type: string
      ComposerAdditionalArguments:
        required: false
        default: ""
        type: string
      ForceSelfHosted:
        required: false
        type: boolean
        default: false
      SkipTests:
        type: boolean
        required: false
        default: false
      PhpcsWorkdir:
        required: false
        type: string
        default: "./src/"
        description: "where is the code to be tested"
      SkipUnitTests:
        type: boolean
        required: false
      RunBehatTests:
        type: boolean
        required: false
        default: false
      BehatVersion:
        description: "behat version to use"
        type: string
        required: false
        default: "3.13.0"
      BehatUsePostgresql:
        type: boolean
        required: false
        default: false
        description: "use postgresql in behat tests"
      PhpVersion:
        required: false
        type: string
        default: "8.1"
        description: "php version to use, with minor version, no bugfix versions. default 8.1"
      SkipImageBuild:
        required: false
        type: boolean
        default: false
        description: "skip building image job"
      UseMakeTargets:
        required: false
        type: string
        default: ""
        description: "If you are using makefile in project - specify targets here"
      PhpExtensions:
        type: string
        required: false
        default: "pdo_sqlite"
      SentryOrganisation:
        type: string
        required: false
        default: "loyalty-factory"
        description: "Sentry Organisation"
      SentryProjectName:
        type: string
        required: false
        default: ""
        description: "Name of a Sentry Project to use"
      EnableSentryRelease:
        type: boolean
        required: false
        default: false
        description: "enable/disable Sentry release"
      SentryUploadSourceMaps:
        type: boolean
        required: false
        default: false
        description: "If You want to upload sourcemaps to sentry"
      SentryTargetEnvironment:
        type: string
        required: false
        default: "production"
        description: "Target environment to build for Sentry"
      ApplicationLanguage:
        type: string
        required: false
        default: "php"
        description: "Language used in repository (default - php, possible options: nodejs)"
      UseManifest:
        type: boolean
        default: true
        required: false
        description: "wether the application uses Manifest or not"
      UseNPM:
        type: boolean
        default: false
        required: false
        description: "UseNPM enables/disables the access to NPM repository"
      NodeVersion:
        type: string
        required: false
        default: "15.12.0"
      DisableNodeBuild:
        type: boolean
        required: false
        default: false
      DisableKarmaTests:
        type: boolean
        required: false
        default: false
      DisableJestTests:
        type: boolean
        required: false
        default: false
      EnablePsalm:
        type: boolean
        required: false
        default: false
      EnablePhpstan:
        type: boolean
        required: false
        default: false
      AdditionalJestParameters:
        type: string
        default: ""
        required: false
      SkipPhpcs:
        type: boolean
        default: false
        required: false
      EnableMysql:
        type: boolean
        default: false
        required: false
      EnableRedis:
        type: boolean
        default: false
        required: false
#      Used in old node (Report)
      Python2AsPython:
        type: boolean
        default: false
        required: false
      Platforms:
        type: string
        default: "linux/arm64,linux/amd64"
        required: false
      WithTarget:
        type: boolean
        default: false
        required: false
      RunSBOM:
        type: boolean
        default: false
        required: false
    secrets:
      token:
        required: true
      docker-reg:
        required: true
      docker-pass:
        required: true
      docker-login:
        required: true
      numa-numa-token:
        required: true
      chartmuseum-url:
        required: true
      gh-ssh-key:
        required: true
      sentry-auth-token:
        required: false
      npmrc:
        required: false
      composer-oauth:
        required: false
  workflow_dispatch:



jobs:
  setup_variables:
    timeout-minutes: 5
    outputs:
      runners: ${{ steps.runners.outputs.runners }}
      environment: ${{ steps.environment.outputs.environment }}
      imagetag: ${{ steps.imagetag.outputs.imagetag }}
      app: ${{ steps.imagetag.outputs.app }}
      rebuildManifest: ${{ steps.did-manifest-change.outputs.any_changed }}
      github-sha: ${{ steps.imagetag.outputs.github-sha }}
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.token }}
      GH_TOKEN: ${{ secrets.numa-numa-token }}
      FORCE_PUSH: ${{ contains(github.event.head_commit.message, '/forcepush') }}
      DO_E2E_TESTS: ${{ contains(github.event.head_commit.message, '/e2e') }}
    steps:
      - name: pull code
        uses: actions/checkout@v4

      - name: forced selfhosted runners
        id: forced
        if: inputs.ForceSelfHosted
        run: echo "runners=self-hosted" >> $GITHUB_OUTPUT

      - name: how many already paid minutes we have on github action runners?
        id: runners
        if: inputs.ForceSelfHosted == false
        run: |
          type -p gh >/dev/null || (type -p curl >/dev/null || sudo apt install curl -y
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
          && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
          && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
          && sudo apt update \
          && sudo apt install gh -y)
          minutes=`gh api -H "Accept: application/vnd.github+json" /orgs/easir/settings/billing/actions | jq ".total_minutes_used"`
          echo "runners=ubuntu-latest" >> $GITHUB_OUTPUT
          echo "minutes=$minutes" >> $GITHUB_STEP_SUMMARY

      - name: prod or not?
        id: environment
        run: |
          if [[ $GITHUB_REF_NAME = "master" ]]
            then
              export environment=prod
          elif [[ $GITHUB_REF_NAME = "main" ]]
            then
              export environment=prod
          else
            export environment=dev
          fi
          echo "environment=$environment" >> $GITHUB_OUTPUT

      - name: GenerateTAG
        id: imagetag
        run: |
          timestamp=$(date +%s)
          app=$(echo "$GITHUB_REPOSITORY" | cut -f 2 -d "/")
          pull_number=$(jq -r .pull_request.number "$GITHUB_EVENT_PATH")
          echo "app=$app" >> "$GITHUB_ENV"
          if [ ${{ steps.environment.outputs.environment }} = "prod" ]; then
            echo "tag=production-$timestamp-$GITHUB_SHA" >> "$GITHUB_ENV"
            tag=production-"$timestamp"-"$GITHUB_SHA"
          else
            echo "tag=pr-$pull_number-"$timestamp"-$GITHUB_SHA" >> "$GITHUB_ENV"
            tag=pr-"$pull_number-"$timestamp"-$GITHUB_SHA"
          fi
          echo "imagetag=$tag" >> $GITHUB_OUTPUT
          echo "app=$app" >> $GITHUB_OUTPUT
          echo "github-sha=$GITHUB_SHA" >> $GITHUB_OUTPUT

      - name: Check file existence
        id: check_files
        uses: andstor/file-existence-action@v3
        with:
          files: "./manifest.yaml"

      - name: did manifest change?
        if: steps.check_files.outputs.files_exists == 'true'
        id: did-manifest-change
        uses: tj-actions/changed-files@v44.4.0
        with:
          files: |
            ./manifest.yaml

      - name: print all outputs
        run: |
          echo runners: ${{ steps.runners.outputs.runners }} >> $GITHUB_STEP_SUMMARY
          echo environment: ${{ steps.environment.outputs.environment }} >> $GITHUB_STEP_SUMMARY
          echo imagetag: ${{ steps.imagetag.outputs.imagetag }} >> $GITHUB_STEP_SUMMARY
          echo app: ${{ steps.imagetag.outputs.app }} >> $GITHUB_STEP_SUMMARY
          echo rebuildManifest: ${{ steps.did-manifest-change.outputs.any_changed }} >> $GITHUB_STEP_SUMMARY
          echo github-sha: ${{ steps.imagetag.outputs.github-sha }} >> $GITHUB_STEP_SUMMARY

  tests-php:
    if: ${{ inputs.SkipTests != true && inputs.ApplicationLanguage == 'php'}}
    needs: setup_variables
    env:
      GITHUB_TOKEN: ${{ secrets.numa-numa-token }}
      DB_HOST: "127.0.0.1"
      DB_DATABASE: zebra-tests
      DB_USERNAME: root
      DB_PASSWORD: root
      DB_PORT: "3306"
      REDIS_HOST: localhost
      REDIS_PORT: "6379"
      REDIS_DB: 0
      ES_HOST: "127.0.0.1"
      ES_PORT: "9200"
      AUTH_DOMAIN: "0EE2BEA7-87EC-4C45-81FB-04D1C871D975.wave.local"
    runs-on: ${{needs.setup_variables.outputs.runners}}
    timeout-minutes: 40
    steps:
      - name: pull code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.numa-numa-token }}
          submodules: recursive
      - name: start mysql and redis
        run: |
          docker run -d --env MYSQL_DATABASE=zebra-tests --env MYSQL_ROOT_PASSWORD=root -p 3306:3306 --name mariadb mariadb:10.6.10
          docker run -d --name redis -p 6379:6379 --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 5 redis:3.2.3-alpine
      - name: elasticsearch and init mysql
        if: ${{ needs.setup_variables.outputs.app == 'zebra' }}
        run: |
          docker run -d --name es -v $(pwd)/database/scripts:/usr/share/elasticsearch/config/scripts -p 9200:9200 -p 9300:9300 elasticsearch:2.4.4 --script.engine.groovy.inline.aggs=on --logger.discovery=DEBUG --script.index=true --script.indexed=on
          sudo apt update && sudo apt install -y mysql-client
          sleep 15
          mysql -h 127.0.0.1 -proot -u root zebra-tests < database/schema/mysql-schema.dump
      - name: elasticsearch 7
        if: ${{ needs.setup_variables.outputs.app == 'report-service' }}
        run: |
          docker run -d --env ELASTICSEARCH_HOST=127.0.0.1:9200 --env ELASTICSEARCH_INDEX=testreport --name es -p 9200:9200 -p 9300:9300 -e "discovery.type=single-node" docker.elastic.co/elasticsearch/elasticsearch:7.17.23
      - name: authenticate to composer
        if: inputs.ApplicationLanguage == 'php'
        run: |
          echo "{\"github-oauth\": {\"github.com\": \"${{secrets.numa-numa-token}}\"}}" > $GITHUB_WORKSPACE/auth.json
      - uses: shivammathur/setup-php@v2
        if: inputs.ApplicationLanguage == 'php'
        with:
          php-version: ${{inputs.PhpVersion}}
          extensions: ${{inputs.PhpExtensions}}
          coverage: pcov
          tools: composer
          #behat, phpunit, composer, phpcs, php-cs-fixer, phpcbf, phpstan, psalm, phplint,
        env:
          runner: ubuntu-latest
          fail-fast: true
      - name: run Composer
        if: inputs.ApplicationLanguage == 'php'
        run: |
          composer install --prefer-dist --no-progress --no-interaction ${{ inputs.ComposerAdditionalArguments }}
      # - name: pause for a diagnosis
      #   run: |
      #     until cat dupa &> /dev/null
      #     do
      #       echo nie ma dupy
      #       sleep 1
      #     done
      - name: make files
        shell: sh
        if: ${{ inputs.UseMakeTargets != '' }}
        run: |
          make ${{ inputs.UseMakeTargets }} -O -k
      - name: migrate
        if: ${{ needs.setup_variables.outputs.app == 'zebra' }}
        run: |
          php artisan zebra:es-mapping --env testing -n -vvv
          php artisan zebra:es-scripts --env testing -n -vvv
          php artisan migrate:fresh --force
      - name: phpcs
        if: (success() || failure()) && inputs.ApplicationLanguage == 'php' && !inputs.SkipPhpcs
        run: |
          composer exec -- phpcs ${{ inputs.PhpcsWorkdir }}

      - name: phplint
        if: (success() || failure()) && inputs.ApplicationLanguage == 'php'
        run: |
          find . -name '*.php' -not -path './vendor/*' -print0 | xargs -0 php -l

      - name: phpunit
        if: (success() || failure()) && inputs.ApplicationLanguage == 'php' && inputs.SkipUnitTests != true
        run: |
          env
          composer exec -- phpunit

      - name: phpstan
        if: (success() || failure()) && inputs.ApplicationLanguage == 'php' && inputs.SkipUnitTests != true && inputs.EnablePhpstan
        run: |
          composer exec -- phpstan analyse

      - name: psalm
        if: (success() || failure()) && inputs.ApplicationLanguage == 'php' && inputs.SkipUnitTests != true && inputs.EnablePsalm
        run: |
          composer exec -- psalm --long-progress

  tests-nodejs:
    if: ${{ inputs.SkipTests != true && inputs.ApplicationLanguage == 'nodejs'}}
    needs: setup_variables
    env:
      APPCONFIG_API: "//api.domain"
      APPCONFIG_SOCKETAUTH: "//api.domain/socket"
      APPCONFIG_UPLOAD: "//api.domain"
      CONFIG_API_URL: "http://api.domain"
      CONFIG_AUTH_URL: "http://api.domain/token"
      GITHUB_TOKEN: ${{ secrets.numa-numa-token }}
    runs-on: ubuntu-22.04 #${{needs.setup_variables.outputs.runners}}
    timeout-minutes: 15
    steps:
      - name: pull code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.numa-numa-token }}
          submodules: recursive
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ inputs.NodeVersion }}
      - name: prepare environment
        run: |
          pwd
          ls -al ./
          echo "${{ secrets.npmrc }}" > .npmrc
          sudo apt update && sudo apt install -y bash make gcc g++ python3 python2 pkgconf librdkafka-dev
      - name: Python2 as Python
        if: inputs.Python2AsPython
        run: |
          alias python=python2

      - name: node install
        run: |
          npm install -include=dev

      - name: node build
        if: true && !inputs.DisableNodeBuild
        run: |
          npm run build

      - name: karma tests
        if: true && !inputs.DisableKarmaTests
        run: |
          sudo apt install -y chromium-browser ca-certificates fonts-liberation libasound2 libatk-bridge2.0-0 libatk1.0-0 libc6 libcairo2 libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgbm1 libgcc1 libglib2.0-0 libgtk-3-0 libnspr4 libnss3 libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 lsb-release wget xdg-utils
          npm i puppeteer
          npm run test:karma --no-sandbox

      - name: jest tests
        if: inputs.ApplicationLanguage == 'nodejs' && !inputs.DisableJestTests
        run: |
          npm run test:jest ${{ inputs.AdditionalJestParameters }}

      - name: jscs tests
        if: inputs.ApplicationLanguage == 'nodejs' && !inputs.DisableJestTests
        run: |
          node_modules/.bin/jscs --config=.jscsrc src/app

      - name: eslint
        if: inputs.ApplicationLanguage == 'nodejs'
        run: |
          npm run test:eslint


  behat:
    if: inputs.RunBehatTests
    needs: setup_variables
    env:
      GITHUB_TOKEN: ${{ secrets.token }}
    runs-on: ${{needs.setup_variables.outputs.runners}}
    timeout-minutes: 15
    steps:
      - name: pull code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.numa-numa-token }}
          submodules: recursive

      - name: start postgres
        if: inputs.BehatUsePostgresql
        run: |
          docker run --rm --name postgres-db -p 5432:5432 -e POSTGRES_PASSWORD=postgres -e POSTGRES_PASSWORD=postgres -e POSTGRES_DB=${{ needs.setup_variables.outputs.app }} -d postgres:13.13

      - name: authenticate to composer
        run: |
          echo "{\"github-oauth\": {\"github.com\": \"${{secrets.numa-numa-token}}\"}}" > $GITHUB_WORKSPACE/auth.json

#      Workaround failing GH token in composer (Telecom/Vehicle service)
      - name: Add SSH key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.gh-ssh-key }}

      - uses: shivammathur/setup-php@v2
        if: inputs.ApplicationLanguage == 'php'
        with:
          php-version: ${{inputs.PhpVersion}}
          extensions: ${{inputs.PhpExtensions}}
          coverage: pcov
          tools: composer
        env:
          runner: ${{needs.setup_variables.outputs.runners}}
          fail-fast: true

      - name: run Composer
        if: inputs.ApplicationLanguage == 'php'
        run: |
          composer install --prefer-dist --no-progress --no-interaction ${{ inputs.ComposerAdditionalArguments }}

      - name: lets fire up the app
        env:
          SHELL_VERBOSITY: "-1"
        run: whoami && mkdir www && sudo php -d error_reporting="E_ALL & ~E_NOTICE & ~E_DEPRECATED" -S 0.0.0.0:8000 -t www public/index.php &

      - name: test
        env:
          DATABASE_URL: 'postgresql://postgres:postgres@localhost:5432/${{ needs.setup_variables.outputs.app }}?driverOptions[schema]=public'
        if: ${{ inputs.BehatUsePostgresql }}
        run: ./vendor/bin/behat features

      - name: and test it
        if: ${{ !inputs.BehatUsePostgresql }}
        uses: php-actions/behat@v1
        with:
          version: ${{ inputs.BehatVersion }}
          php_version: ${{ inputs.PhpVersion }}
          php_extensions: ${{inputs.PhpExtensions}}

  manifest-generate:
    timeout-minutes: 5
    needs: setup_variables
    runs-on: ${{needs.setup_variables.outputs.runners}}
    if: needs.setup_variables.outputs.rebuildManifest == 'true'
    container:
      image: docker-registry.easir.com/manifest-php:latest
      credentials:
        username: ${{secrets.docker-login}}
        password: ${{secrets.docker-pass}}
    steps:
      - name: pull code
        uses: actions/checkout@v4

      - name: generate manifest
        run: |
          manifest generate "${{ needs.setup_variables.outputs.app }}" "0.0.1-${{github.sha}}-manifestv2" --set="image.repository=ghcr.io/easir/${{ needs.setup_variables.outputs.app }}" --set="image.tag=${{ needs.setup_variables.outputs.imagetag }}"
          helmpush chart "${{secrets.chartmuseum-url}}" --version "0.0.1-${{github.sha}}-manifestv2"

  # testofskip:
  #   needs: [ "setup_variables", "tests" ]
  #   runs-on: ${{needs.setup_variables.outputs.runners}}
  #   steps:
  #     - name: test
  #       if: |
  #         always() &&
  #         !contains(needs.*.result, 'failure') &&
  #         !contains(needs.*.result, 'canceled') &&
  #         inputs.SkipImageBuild
  #       run: echo "dupa"

  build-image:
    timeout-minutes: 30
    needs: [ "setup_variables", "tests-nodejs","tests-php" ]
    if: |
      always() && 
      !contains(needs.*.result, 'failure') &&
      !cancelled() &&
      !inputs.SkipImageBuild
    env:
      GITHUB_TOKEN: ${{ secrets.token }}
    runs-on: ${{needs.setup_variables.outputs.runners}}
    steps:
      # - name: Import secrets for DEV
      #   if: ${{ steps.environment.outputs.environment }} = "dev"
      #   uses: mcmarkj/1password-actions@v2
      #   id: screts-dev
      #   with:
      #     connect-server-url: ${{ secrets.TEST_OP_CONNECT_HOST }}
      #     connect-server-token: ${{ secrets.TEST_OP_CONNECT_TOKEN }}

      # - name: Import secrets for Prod
      #   if: ${{ steps.environment.outputs.environment }} = "prod"
      #   uses: mcmarkj/1password-actions@v2
      #   id: screts-prod
      #   with:
      #     connect-server-url: ${{ secrets.TEST_OP_CONNECT_HOST }}
      #     connect-server-token: ${{ secrets.TEST_OP_CONNECT_TOKEN }}
      - name: pull code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.numa-numa-token }}
          submodules: recursive

      - name: authenticate to NPM
        if: inputs.UseNPM
        run: |
          rm -f .npmrc
          echo "${{secrets.npmrc}}" > .npmrc
      - name: authenticate to composer
        if: inputs.ApplicationLanguage == 'php'
        run: |
          echo "{\"github-oauth\": {\"github.com\": \"${{secrets.numa-numa-token}}\"}}" > $GITHUB_WORKSPACE/auth.json

      - name: Set up Docker Context for Buildx
        id: buildx-context
        run: |
          docker context create builders
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Docker Setup Buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: latest
          endpoint: builders
          platforms: ${{ inputs.Platforms }}
          buildkitd-flags: --debug

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5.5.1
        with:
          images: |
            ${{ secrets.docker-reg }}/${{needs.setup_variables.outputs.app}}
            ghcr.io/easir/${{needs.setup_variables.outputs.app}}
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=ref,event=tag
            type=sha,enable=true,priority=100,prefix=,suffix=,format=long
            type=raw,value=${{needs.setup_variables.outputs.imagetag}}
            type=raw,value=latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.source=https://github.com/easir/${{needs.setup_variables.outputs.app}}

      - name: Docker Login
        uses: docker/login-action@v3.0.0
        with:
          registry: ghcr.io
          username: easir
          password: ${{ secrets.numa-numa-token }}
          ecr: false

      - name: Docker Login
        uses: docker/login-action@v3.0.0
        with:
          registry: ${{ secrets.docker-reg }}
          username: ${{ secrets.docker-login }}
          password: ${{ secrets.docker-pass }}
          ecr: false

      - name: Build and push Docker images with target
        if: inputs.WithTarget
        uses: docker/build-push-action@v6
        with:
          build-args: |
            IMAGE_VERSION=${{ needs.setup_variables.outputs.github-sha }}
            ENVIRONMENT=${{ needs.setup_variables.outputs.environment }}
            SENTRY_ORG=${{inputs.SentryOrganisation}}
            SENTRY_AUTH_TOKEN=${{secrets.sentry-auth-token}}
            SENTRY_PROJECT=${{inputs.SentryProjectName}}
          platforms: ${{ inputs.Platforms }}
          context: .
          allow: network.host
          network: host
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          secrets: |
            GIT_AUTH_TOKEN=${{ secrets.numa-numa-token }}
          github-token: ${{ secrets.numa-numa-token }}
          target: prod
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Docker images
        if: true && !inputs.WithTarget
        uses: docker/build-push-action@v6
        with:
          build-args: |
            IMAGE_VERSION=${{ needs.setup_variables.outputs.github-sha }}
            ENVIRONMENT=${{ needs.setup_variables.outputs.environment }}
            SENTRY_ORG=${{inputs.SentryOrganisation}}
            SENTRY_AUTH_TOKEN=${{secrets.sentry-auth-token}}
            SENTRY_PROJECT=${{inputs.SentryProjectName}}
          platforms: ${{ inputs.Platforms }}
          context: .
          allow: network.host
          network: host
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          secrets: |
            GIT_AUTH_TOKEN=${{ secrets.numa-numa-token }}
          github-token: ${{ secrets.numa-numa-token }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: summary
        run: |
          echo IMAGE_VERSION: ${{ needs.setup_variables.outputs.github-sha }} >> $GITHUB_STEP_SUMMARY
          echo "IMAGE TAGS : ${{ steps.meta.outputs.tags }} >> $GITHUB_STEP_SUMMARY"

      - name: ifcheck
        if: inputs.EnableSentryRelease && needs.setup_variables.outputs.environment == 'prod'
        run: |
          echo just a check

  sentry-release:
    timeout-minutes: 5
    needs: [ "setup_variables", "build-image" ]
    if: ${{ always() && inputs.EnableSentryRelease && needs.setup_variables.outputs.environment == 'prod' }}
    env:
      GITHUB_TOKEN: ${{ secrets.token }}
    runs-on: ${{needs.setup_variables.outputs.runners}}
    steps:
      - name: pull code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.numa-numa-token }}
          submodules: recursive
      - name: Sentry Release
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.sentry-auth-token }}
          SENTRY_ORG: ${{ inputs.SentryOrganisation }}
          SENTRY_PROJECT: ${{ inputs.SentryProjectName }}
        with:
          environment: ${{ inputs.SentryTargetEnvironment }}
          version: ${{ needs.setup_variables.outputs.github-sha }}
  deployment_sme:
    environment: SME
    needs: [ "setup_variables", "build-image" ]
    if: ${{ always() && needs.setup_variables.outputs.environment == 'prod' }}
    runs-on: ${{needs.setup_variables.outputs.runners}}
    env:
      GITHUB_TOKEN: ${{ secrets.token }}
    steps:
      - name: simply updating the github environments
        run: |
          echo github env updated

  deployment_sad_staging:
    environment: SAD_Staging
    needs: [ "setup_variables", "build-image" ]
    if: ${{ always() && needs.setup_variables.outputs.environment == 'prod' }}
    runs-on: ${{needs.setup_variables.outputs.runners}}
    env:
      GITHUB_TOKEN: ${{ secrets.token }}
    steps:
      - name: simply updating the github environments
        run: |
          echo github env updated

  SBOM:
    timeout-minutes: 5
    needs: setup_variables
    runs-on: ${{needs.setup_variables.outputs.runners}}
    if: inputs.RunSBOM
    steps:
      - name: Generate SBOM on Docker image
        uses: anchore/sbom-action@v0.18.0
        with:
          image: ${{secrets.docker-reg}}/${{ needs.setup_variables.outputs.app }}:${{ needs.setup_variables.outputs.imagetag }}
          registry-username: ${{ secrets.docker-login }}
          registry-password: ${{ secrets.docker-pass }}
          output-file: sbom.spdx.json
          # ⬇️ only update the dependency graph when merged! WS comment: not sure what that is about
          # dependency-snapshot: true 
          artifact-name: sbom.spdx.json
          format: spdx-json
      - name: Scan SBOM
        uses: anchore/scan-action@v3
        id: scan_sbom
        with:
            sbom: sbom.spdx.json
            fail-build: false
            output-format: json
      - name: Upload vulnerabilities artifact
        uses: actions/upload-artifact@v4
        if: success() || failure()
        with:
          name: vulnerabilities.json
          path: ${{ steps.scan_sbom.outputs.json }}
      - name: Build vulnerability scan report
        id: vulnerability_scan_report
        uses: actions/github-script@v7
        if: success() || failure()
        with:
          script: |
            let fs = require('fs')
            let file = '${{ steps.scan.outputs.json }}'
            let data
  
            try {
              data = JSON.parse(fs.readFileSync(file, 'utf8'));
            } catch(e) {
              console.log(e)
            }
  
            let output = `:microscope: vulnerability scan result: **failure in parsing report**`
  
  
            if (typeof(data) == 'object') {
              const issues = data.matches.length
              output = `# Report for: \`${{ inputs.imageName }}\` : ${{ inputs.imageTag }}`
              output += `\n:microscope: vulnerability scan result: \`${issues}\` issue(s) found `
              severityCounter = {}
              severitySortMap = {
                'Critical': 0,
                'High': 1,
                'Medium': 2,
                'Low': 3,
                'Negligible': 4,
              }
              
              if (issues > 0) {
                let table = '\n'
                table += '<details><summary>View details</summary>\n'
                table += '\n'
                table += '| Severity | Artifact | Affected version | Type | Fixes | Description | Source |\n'
                table += '|----------|----------|------------------|------|-------|-------------|--------|\n'
  
                let criticals = 0
                let highs = 0
  
                let matches = data.matches.sort(function(a, b) {
                  return (severitySortMap[a.vulnerability.severity] > severitySortMap[b.vulnerability.severity]) ? 1 : -1
                })
  
                for (match of matches) {
                  let description = match.vulnerability.description || ''
        
                  if (description !== '') {
                    description = match.vulnerability.description.replace(/[\r\n]/g, '<br>')
                  }
  
                  let severity = match.vulnerability.severity
                  let artifact_name = match.artifact.name
                  let version = match.artifact.version
                  let type = match.artifact.type
                  let fixes = match.vulnerability.fix.versions.join('|') || 'N/A'
                  let source = match.vulnerability.id
                  let source_url = match.vulnerability.dataSource
  
                  if (! (severity in severityCounter)) {
                    severityCounter[severity] = 0
                  }
                  
                  severityCounter[severity] += 1
                              
                  if (severity == 'Negligible') {
                    continue
                  }
  
                  table += `| ${severity} | ${artifact_name} | ${version} | ${type} | \`${fixes}\` | ${description} | [${source}](${source_url})\n`
                  if (severity == 'Critical') {
                    criticals++
                  }
                  if (severity == 'High') {
                    highs++
                  }
                }
                output += highs > 0 ? ':warning:' : ''
                
                if (criticals > 0) {
                  output += `\n:pause_button: **one or more vulnerabilities found with label _critical_, pausing build.** :rotating_light:`
                }
  
                output += '\n| Severity | Count |\n'
                output += '|----------|-------|\n'
                for (sev in severityCounter) {
                  output += `| ${sev} | ${severityCounter[sev]} |\n`
                }
                            
                output += table
                output += '</details>\n\n'
              }
  
              try {
                fs.writeFileSync('vulnerability_report.md', output);
              } catch (err) {
                console.error(err);
              }
            }  
      - name: Add vulnerability report to summary
        if: success() || failure()
        run: cat vulnerability_report.md >> $GITHUB_STEP_SUMMARY